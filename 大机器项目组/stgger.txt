bool StegerLine(const Mat & srcImage, Mat & outImage, Mat & srcImage01)
{
	Mat Image_C = srcImage.clone();
	Mat flags = Matzeros(srcImage.rows, srcImage.cols, CV_8UC1);
	Mat Image_Line = Matzeros(srcImage.rows, srcImage.cols, CV_8UC1);
	Mat Image_Line01 = srcImage01.clone();
	GaussianBlur(srcImage, Image_C, Size(5, 5), 2, 2);
	Mat m1, m2;
	m1 = (Mat_float(1, 2)  1, -1);x偏导一阶偏导 = f(x+1,y)-f(x,y)
	m2 = (Mat_float(2, 1)  1, -1);y偏导一阶偏导 = f(x,y+1)-f(x,y)
	Mat dx, dy;
	使用m1卷积 当前坐标的灰度值-（x+1）的灰度值
	filter2D(Image_C, dx, CV_32FC1, m1);卷积
	filter2D(Image_C, dy, CV_32FC1, m2);卷积
	 二阶偏导数
		Mat m3, m4, m5;
	m3 = (Mat_float(1, 3)  1, -2, 1);求二阶x偏导的矩阵=f(x+1,y)+f(x-1,y)-2f(x,y)
	m4 = (Mat_float(3, 1)  1, -2, 1);二阶y偏导的矩阵
	m5 = (Mat_float(2, 2)  1, -1, -1, 1);二阶xy偏导矩阵=f(x+1,y+1)-f(x+1,y)-f(x,y+1)+f(x,y)
	Mat dxx, dyy, dxy;
	求得对应点的偏导数值
	filter2D(Image_C, dxx, CV_32FC1, m3);
	filter2D(Image_C, dyy, CV_32FC1, m4);
	filter2D(Image_C, dxy, CV_32FC1, m5);
	hessian矩阵
	double maxD = -1;
	int imgcol = Image_C.cols;
	int imgrow = Image_C.rows;
	stdvectordouble Pt;
	for (int i = 0; i  imgrow; i++)
	{
		for (int j = 0; j  imgcol; j++)
		{
			全黑的时候就不计算了，大于一个阈值的时候开始计算
			if (srcImage.atuchar(i, j)  50)
			{
				Mat hessian(2, 2, CV_32FC1);
				得到对应点的hessian矩阵
				对每个点，构造出hessian矩阵
				hessian.atfloat(0, 0) = dxx.atfloat(i,j);
				hessian.atfloat(1, 0) = dxy.atfloat(i,j);
				hessian.atfloat(0, 1) = dxy.atfloat(i,j);
				hessian.atfloat(1, 1) = dyy.atfloat(i,j);
				特征值和特征向量
				Mat eValue;
				Mat eVectors;
				 hessian矩阵22 对称矩阵， 有两个特征值
				 获取当前点的特征值和特征向量
				 存在两个特征值及对应特征向量
				eigen(hessian, eValue, eVectors);
				stdcout  eValue  eValue  stdendl  eVectors  eVectors  stdendl;
				nx为特征值最大对应的x，ny为特征值最大对应的y
				double nx, ny;
				double fmaxD = 0;
				求特征值绝对值最大时对应的特征向量
				Hessian矩阵的特征值就是形容其在该点附近特征向量方向的凹凸性，特征值越大，凸性越强。
				if (fabs(eValue.atfloat(0, 0)) = fabs(eValue.atfloat(1, 0)))
				{
					nx = eVectors.atfloat(0, 0);
					ny = eVectors.atfloat(0, 1);
					fmaxD = eValue.atfloat(0, 0);
				}
				else
				{
					nx =  eVectors.atfloat(1, 0);
					ny =  eVectors.atfloat(1, 1);
					fmaxD = eValue.atfloat(1, 0);
				}
				 使用泰勒展开表示光强的分布函数f(x+tnx,y+tny)可以表示当前坐标附近的光强分布
				 f(x+tnx,y+tny) hessian矩阵特征值最大的对应的特征向量(nx，ny)表示梯度上升最快的方向（光强改变最快），要往这个方向改变  
				 由于x，y，nx,ny已知，这个当前坐标附近的光强分布函数可以看作是关于t的一个分布函数
				 则可以对t求导，令导数为0的地方就是光强最强的地方（极值），也就是激光中心点。
				 如果tnx和tny都小于0.5说明这个极值点就位于当前像素内，附近光强分布函数适用
				 如果tnx和tny都很大，附近光强分布函数不适用，则跳过这个点，继续扫描距离激光中心更近的点
				double t = -
					(nx  dx.atfloat(i, j) + ny  dy.atfloat(i, j))
					
					(nx  nx  dxx.atfloat(i, j) + 2  nx  ny  dxy.atfloat(i, j) + ny  ny  dyy.atfloat(i, j));
				t nx和t nx代表光条中心点距离当前像素的距离
				if (fabs(t  nx) = 0.5 && fabs(t  ny) = 0.5)
				{
					Pt.push_back(i);
					Pt.push_back(j);
				}
			}

		}
	}
	for (int k = 0; k  Pt.size()  2; k++)
	{
		Point rpt,rpt2;
		rpt.x = Pt[2  k + 0];
		rpt.y = Pt[2  k + 1];
		rpt2.x = rpt.y;
		rpt2.y = rpt.x;
		flags.atuchar(rpt.x, rpt.y) = 255;
		circle(srcImage01, rpt2, 0.5, Scalar(0, 0, 255));
		circle(img0, rpt, 1, Scalar(0, 0, 255));
	}
	int A, B,C;
	for (int i = 0; i  flags.rows; i++)
	{
		A = 0;
		B = 0;
		C = 0;
		for (int j = 0; j  flags.cols; j++)
		{
			if (flags.atuchar(i, j) == 0)
				continue;
			A += flags.atuchar(i, j)  j;
			B += flags.atuchar(i, j);
		}
		if (A == 0  B == 0)
			continue;
		C = A  B;
		Image_Line.atuchar(i, C) = 255;		
		circle(Image_Line01, Point(C,i), 0.5, Scalar(0, 0, 255));
	}
	outImage = Image_Line.clone();
	return false;
}